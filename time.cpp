//=============================================================================
//
// 時間処理 [time.cpp]
// Author : masayasu wakita
//
//=============================================================================
#include "time.h"
#include "game.h"
#include "manager.h"
#include "renderer.h"
#include "light.h"
#include "result.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CTime::CTime(CScene::PRIORITY obj = CScene::PRIORITY_UI) : CScene(obj)
{
	SetObjType(PRIORITY_UI);	//オブジェクトタイプ

	//値の初期化
	m_type = OPERATIONTYPE_TIMER;
	m_dTimeFrame = 0;			// フレーム数の初期化
	m_nSeconds = 0;				// 秒数の初期化
	m_nMinutes = 0;				// 分数の初期化

	SetTime(m_dTimeFrame);
	m_bStart = false;			// タイマーの動作
}

//=============================================================================
// デストラクタ
//=============================================================================
CTime::~CTime()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CTime::Init(void)
{
	return S_OK;
}

//=============================================================================
// 開放処理
//=============================================================================
void CTime::Uninit(void)
{
	// クリアタイムの設定
	CResult::SetMinutes(m_nMinutes);		// 分数の設定
	CResult::SetSeconds(m_nSeconds);		// 秒数の設定
}

//=============================================================================
// 更新処理
//=============================================================================
void CTime::Update(void)
{
	if (m_bStart)
	{
		switch (m_type)
		{
		case OPERATIONTYPE_TIMER:
			m_dTimeFrame--;					// カウンターに1加算する

			if (m_dTimeFrame >= 0)
			{// カウンターが0より大きいとき
				SetTime(m_dTimeFrame);		// タイムの更新
			}

			if (m_nSeconds == 0)
			{// 秒数が60を超えたとき
				m_bStart = false;
			}
			break;
		case OPERATIONTYPE_STOPWATCH:
			m_dTimeFrame++;					// カウンターに1加算する

			if (m_dTimeFrame >= 0)
			{// カウンターが0より大きいとき
				SetTime(m_dTimeFrame);		// タイムの更新
			}

			if (m_nSeconds >= 60)
			{// 秒数が60を超えたとき
				m_nMinutes++;				// 分数に1加算する
				m_dTimeFrame = 0;			// フレーム数のリセット
				m_nSeconds = 0;				// 秒数のリセット
			}
			break;
		}
	}

	//CDebugProc::Log("%d : %d\n", m_nMinutes, m_nSeconds);
}

//=============================================================================
// 描画処理
//=============================================================================
void CTime::Draw(void)
{

}

//=============================================================================
// クリエイト処理
//=============================================================================
CTime *CTime::Create(void)
{
	CTime *pTime;

	pTime = new CTime(CScene::PRIORITY_UI);
	pTime->Init();
	pTime->SetSeconds(0);
	return pTime;
}

//=============================================================================
// タイムの変更
//=============================================================================
void CTime::SetTime(int nTime)
{
	//60フレームに1回で1秒
	m_nSeconds = nTime / 60;
}
//=============================================================================
// タイムの変更
//=============================================================================
void CTime::SetSeconds(int nTime)
{
	m_dTimeFrame += nTime * 60;
	m_nMaxSeconds = m_dTimeFrame / 60;

	SetTime(m_dTimeFrame);
}

//=============================================================================
// タイマーの動作方法設定
//=============================================================================
void CTime::SetOpType(OPERATIONTYPE type)
{
	m_type = type;
}

//=============================================================================
// タイマーの動作フラグ
//=============================================================================
void CTime::SetUpdateTimer(bool bValue)
{
	m_bStart = bValue;
}